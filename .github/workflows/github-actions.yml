name: Full Auto Release App Service (.NET-native)

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Configure NuGet for GitHub Packages
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --name github \
            --username x-access-token \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text

      - name: Read version from VERSION.txt
        if: github.ref == 'refs/heads/main'
        id: version_main
        run: |
          RELEASE_TAG=$(cat VERSION.txt)
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          VERSION_CLEANED="${RELEASE_TAG#v}"
          echo "VERSION_CLEANED=$VERSION_CLEANED" >> $GITHUB_ENV

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: tag
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          echo "version=$RELEASE_TAG" >> $GITHUB_OUTPUT
          VERSION_CLEANED="${RELEASE_TAG#v}"
          echo "VERSION_CLEANED=$VERSION_CLEANED" >> $GITHUB_ENV

      - name: Tag and push release (only on main)
        if: github.ref == 'refs/heads/main'
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.RELEASE_TAG }}"; then
            echo "Tag already exists. Skipping."
            exit 0
          fi
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish container to GHCR
        run: |
          dotnet publish \
            --os linux \
            --arch x64 \
            -p:ContainerImageTags="latest;${{ env.VERSION_CLEANED }}" \
            -p:ContainerRegistry=ghcr.io \
            -p:ContainerRepository=${{ github.repository_owner }}/app-service \
            -t:PublishContainer app-service/app-service.csproj

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.version || env.RELEASE_TAG }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump to next patch pre-release (only on main)
        if: github.ref == 'refs/heads/main'
        run: |
          RELEASE_TAG=${{ env.RELEASE_TAG }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "${RELEASE_TAG#v}"
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}-pre"
          echo "$NEXT_VERSION" > VERSION.txt
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump (only on main)
        if: github.ref == 'refs/heads/main'
        run: |
          git add VERSION.txt
          git commit -m "Bump version to ${{ env.NEXT_VERSION }} after release ${{ env.RELEASE_TAG }}"
          git push origin main || echo "Push blocked (e.g. branch protection)"
